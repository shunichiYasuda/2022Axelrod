public class noRegion {
	// 空間構造を持たない参照ケース

	static CIndividual[] pop;
	static String dateName;// ファイルの先頭に付加する日時
	static String timeStamp; // 実験記録につける日時秒。
	static File aveFile, gTypeFile, statFile, gameAreaCountFile, matingAreaCountFile;
	static File matingAreaPayoff, matingAreaNumber; // 交配領域での個体数と領域内での平均利得
	static PrintWriter pwAve, pwGType, pwStat, pwGACount, pwMACount;
	static PrintWriter pwAreaPayoff, pwAreaNumber;
	// 平均値を記録する2次元配列
	static double[][] aveTable;
	// loop の回数。main 以外でも必要なので
	static int wholeCount;

	public static void main(String[] args) {
		// pop の生成
		pop = new CIndividual[CConst.numOfMember];
		for (int m = 0; m < CConst.numOfMember; m++) {
			pop[m] = new CIndividual();
		}
		//
		// 収束判定のため10回分記録をとる
		final int checkTerm = 10;
		char[] Q = new char[checkTerm];
		int checkCount = 6; // 10回の内6回協力を収束と定義
		final double coopValue = 2.76;
		final double defectValue = 1.54;
		// 集団が協力を達成したかどうか状況を示すフラグ：収束なし N ,裏切り D, 協力 C
		char stateFlag = 'N';
		// 集団の状態記録。協力状態、裏切り状態、どちらでもなし
		char[] popState = new char[CConst.GEN];
		// 集団の状態記録を EXP分保存するテーブル
		char[][] popStateTable = new char[CConst.GEN][CConst.EXP];
		// 集団が協力へ収束したかどうかを判定するフラグ。このフラグが立っている実験を
		// 収束実験と判定してさまざまな状況を記録する。
		boolean convergeFlag = false;
		// 実験日時
		makeDate();
		makeFiles();
		// 一時的な平均値の記録
		double[] tmpAve = new double[CConst.GEN];
		// 一時的な染色体の記録.chrom16はString なので工夫が必要
		String[] tmpGType = new String[CConst.GEN];
		// 平均値2次元配列生成と初期化
		aveTable = new double[CConst.GEN][CConst.EXP];
		initialize(aveTable);
		// GType ファイルの最初の2行を書いておく
		pwGType.println("#HEXSIZE\tMEMBER\tGEN\tLOOP");
		pwGType.println(CConst.HEXSIZE + "\t" + CConst.numOfMember + "\t" + CConst.GEN + "\t" + CConst.EXP);
		// 領域ごとの記録ファイルは必ず作る
		pwAreaPayoff.println("#AREASIZE\tGEN\tLOOP");
		pwAreaNumber.println("#AREASIZE\tGEN\tLOOP");
		pwAreaPayoff.println(4 + "\t" + CConst.GEN + "\t" + CConst.EXP);
		pwAreaNumber.println(4 + "\t" + CConst.GEN + "\t" + CConst.EXP);
		// 単に領域のチェックをするためのカウンタ
		int[][] justAreaCounter = new int[2][2];
		double[][] justAreaPayoff = new double[2][2];
		// 収束したときのみ記録する必要があるから一時的に保存する配列
		int[][] thisGenAreaCounter = new int[CConst.GEN][4];
		double[][] thisGenAreaPayoff = new double[CConst.GEN][4];
		// 実験ループ の開始。収束した回数を exp で数える
		int exp = 0;
		wholeCount = 0; // EXP回収束実験を得るのに何回のループが必要だったか
		while (exp < CConst.EXP) {
			// 初期化ブロック
			initialize(tmpAve);
			initialize(thisGenAreaCounter);
			initialize(thisGenAreaPayoff);
			initialize(Q);
			initialize(popState);
			stateFlag = 'N';// 状況フラグも初期化
			convergeFlag = false;// 収束フラグを初期化
			// 世代ループ
			for (int gen = 0; gen < CConst.GEN; gen++) {
				// 初期化ブロック
				initialize(justAreaCounter);
				initialize(justAreaPayoff);
				// 染色体の16進数表現をこの実験に関して一時的に保存する
				// 1行にその世代のすべての個体の染色体を詰め込む。
				StringBuffer sb = new StringBuffer("");
				for (int i = 0; i < CConst.numOfMember; i++) {
					sb.append(pop[i].chrom16);
				}
				tmpGType[gen] = new String(sb);
				//
				// 個体番号の List
				List<Integer> memberList = new ArrayList<Integer>();
				for (int m = 0; m < pop.length; m++) {
					memberList.add(m);
				}
				// リストをシャッフル
				Collections.shuffle(memberList);
				//
				int gameCount = 100;
				for (int p = 0; p < memberList.size() - 1; p++) {
					int player1 = memberList.get(p);
					for (int q = p + 1; q < memberList.size(); q++) {
						int player2 = memberList.get(q);
						// ココにゲームが入る ゲームは100回
						for (int n = 0; n < gameCount; n++) {
							game(player1, player2);
						}
					}
				} // end of for(p=0 ; 総当たり戦の終わり
					// 利得は「平均利得」である
				for (int m = 0; m < memberList.size(); m++) {
					int id = memberList.get(m);
					double cumPayoff = pop[id].getCumPayoff();
					cumPayoff = cumPayoff / (double) pop[id].gameCount;
					pop[memberList.get(m)].setCumPayoff(cumPayoff);
				}
				// 集団の平均値を一時的にとっておく
				double aveSum = 0.0;
				for (int m = 0; m < pop.length; m++) {
					aveSum += pop[m].cumPayoff;
				}
				tmpAve[gen] = aveSum / (double) CConst.numOfMember;
				//
				// 集団平均値に基づく収束判定
				if (tmpAve[gen] >= coopValue) { // 協力の値を達成した
					stateFlag = 'C'; // フラグのセット
				} else {
					if (tmpAve[gen] <= defectValue) {
						stateFlag = 'D';
					} else {
						stateFlag = 'N';
					}
				}
				// Q の詰め替え
				for (int i = 1; i < checkTerm; i++) {
					Q[i - 1] = Q[i];
				}
				Q[checkTerm - 1] = stateFlag;
				// Qのチェック収束条件を満たしているかどうかをチェックする。
				int cntCoop = 0;
				int cntDefect = 0;
				int cntNone = 0;
				for (int i = 0; i < Q.length; i++) {
					if (Q[i] == 'C') {
						cntCoop++;
					}
					if (Q[i] == 'D') {
						cntDefect++;
					}
					if (Q[i] == 'N') {
						cntNone++;
					}
				} // C ,D,Nの数を数えた
					// その回数がcheckCount を超えているなら
				if (cntCoop >= checkCount) {
					// 収束フラグをセットする。
					convergeFlag = true;
					System.out.println("収束：gen=" + gen + "\t実験回数：exp=" + exp);
					// 集団の状態は
					popState[gen] = 'C';
				}
				// Defect がcheckCount を超えている
				if (cntDefect >= checkCount) {
					// 状況は裏切り
					popState[gen] = 'D';
				}
				if (cntNone >= checkCount) {
					popState[gen] = 'N';
				}
				// 収束判定の終わり
				/*
				 * 単に4つの領域のデータがほしいだけなのでここで領域の個体数と平均値を入れておく。ここだけで処理したい
				 */
				double[][] tmpPayoff = new double[2][2];
				// p=0 -0.5, q=0-0.5 領域3「裏切り」
				justAreaCounter[1][0] = regionCounter(0.0, 0.5, 0.0, 0.5);
				tmpPayoff[1][0] = regionPayoffSum(0.0, 0.5, 0.0, 0.5);
				// p=0.5-1.0, q = 0-0.5 領域4「しっぺ返し」
				justAreaCounter[1][1] = regionCounter(0.5, 1.0, 0.0, 0.5);
				tmpPayoff[1][1] = regionPayoffSum(0.5, 1.0, 0.0, 0.5);
				// p = 0.0-0.5, q = 0.5-1.0 領域1「あまのじゃく」
				justAreaCounter[0][0] = regionCounter(0.0, 0.5, 0.5, 1.0);
				tmpPayoff[0][0] = regionPayoffSum(0.0, 0.5, 0.5, 1.0);
				// p = 0.5-1.0, q= 05.-1.0 領域2「お人好し」
				justAreaCounter[0][1] = regionCounter(0.5, 1.0, 0.5, 1.0);
				tmpPayoff[0][1] = regionPayoffSum(0.5, 1.0, 0.5, 1.0);
				for (int i = 0; i < tmpPayoff.length; i++) {
					for (int j = 0; j < tmpPayoff[i].length; j++) {
						if (justAreaCounter[i][j] == 0) {
							justAreaPayoff[i][j] = 0.0;
						} else {
							justAreaPayoff[i][j] = tmpPayoff[i][j] / justAreaCounter[i][j];
						}
					}
				}
				thisGenAreaPayoff[gen] = matToRecord(justAreaPayoff);
				thisGenAreaCounter[gen] = matToRecord(justAreaCounter);
				// 4領域の個体数と平均利得保存終わり
				/*
				 * ここからGA過程
				 */
				// 集団すべての個体について線形スケーリング
				linearScalling();
				// 親選択
				int[] parents = new int[pop.length]; // 親番号配列。初期化はサブルーチンの中
				makeParent(parents);
				// クロスオーバー選択
				// 親リストは偶数なので、前から二つずつペアリング
				for (int m = 0; m < parents.length - 1; m += 2) {
					int parent1, parent2;
					parent1 = parents[m];
					parent2 = parents[m + 1];
					Random randSeed = new Random();
					if (bingo(CConst.crossProb)) {
						int point = randSeed.nextInt(CConst.LENGTH);
						// まったく入れ替わらない・全部入れ替わるが起きるといやなので
						while (point == 0 || point == CConst.LENGTH - 1) {
							point = randSeed.nextInt(CConst.LENGTH);
						}
						for (int index = 0; index < point; index++) {
							char tmp = pop[parent1].chrom[index];
							pop[parent1].chrom[index] = pop[parent2].chrom[index];
							pop[parent2].chrom[index] = tmp;
						}
					} // end of if(クロスオーバーがビンゴ
				} // クロスオーバー終わり
					// 突然変異。すべてのビットに対して CConst.mutProb の確率で突然変異が起きる
				for (int m = 0; m < pop.length; m++) {
					for (int index = 0; index < CConst.LENGTH; index++) {
						if (bingo(CConst.mutProb)) {
							if (pop[m].chrom[index] == '1') {
								pop[m].chrom[index] = '0';
							} else {
								pop[m].chrom[index] = '1';
							}
						} // end of if(突然変異がビンゴ
					}
				} // end of for(m=0 ...すべての個体について突然変異終わり
					// すべての個体のchromを親chromで置き換える。
				for (int m = 0; m < pop.length; m++) {
					int id = parents[m]; // 親番号
					char[] rep = new char[CConst.LENGTH];
					for (int j = 0; j < rep.length; j++) {
						rep[j] = pop[id].chrom[j];
					}
					pop[m].replace(rep);
				}
				// 置き換え終わり、次の世代へ。
			} // end of 全世代のGA終わり。1つの実験が終わった。
				// 今の実験について
			if (convergeFlag) {// 協力への収束があった
				// 遺伝子型をファイルへ書き出す
				for (int i = 0; i < tmpGType.length; i++) {
					pwGType.println(tmpGType[i]);
				}
				// 平均値を平均値テーブルに保存,集団の状態記録をテーブルに保存
				for (int i = 0; i < aveTable.length; i++) {
					aveTable[i][exp] = tmpAve[i];
					popStateTable[i][exp] = popState[i];
				}
				// このとき、領域データをファイルへ書き出す。
				for (int i = 0; i < CConst.GEN; i++) {
					pwAreaNumber.print(thisGenAreaCounter[i][0]);
					pwAreaPayoff.print(CConst.round(thisGenAreaPayoff[i][0]));
					for (int j = 1; j < 4; j++) {
						pwAreaNumber.print("\t" + thisGenAreaCounter[i][j]);
						pwAreaPayoff.print("\t" + CConst.round(thisGenAreaPayoff[i][j]));
					}
					pwAreaNumber.println("");
					pwAreaPayoff.println("");
				}
				System.out.println("loop =" + exp + "\twholeCount =" + wholeCount);
				//収束した場合だけ実験回数を進める
				exp++;
			}
			// 協力への収束した実験と、収束しなかった実験とを合わせて何回回ったか
			wholeCount++;
			System.out.println("総実験回数="+wholeCount);
			// 次の実験のために集団を初期化
			for (int m = 0; m < CConst.numOfMember; m++) {
				pop[m].initialize();
			}
			
		} // end of すべての実験

		// 規定回数収束した実験を得たら、平均値をファイルに書き出す
		for (int i = 0; i < aveTable.length; i++) {
			for (int j = 0; j < aveTable[i].length; j++) {
				pwAve.print(CConst.round(aveTable[i][j]) + "\t");
			}
			pwAve.println("");
		}
		// 実験の基礎情報を作る
		pwStat.println("experiment date:" + timeStamp);
		pwStat.println("size of population: " + CConst.numOfMember);
		pwStat.println("prob of cross over = " + CConst.crossProb);
		pwStat.println("prob of mutant = " + CConst.mutProb);
		pwStat.println("length  of genotype = " + CConst.LENGTH);
		pwStat.println("Generation = " + CConst.GEN);
		pwStat.println("total " + wholeCount + " experiments are needed for " + CConst.EXP + " converge.");
		// 集団の状態記録から、協力の持続期間について情報を得る。
		pwStat.println("loop\tfirstGen\ttotalCoop\tmaxKeep");
		int keep, maxKeep, totalCoop, firstGen;
		int sumFirstGen, sumMaxKeep, sumTotalCoop;
		sumFirstGen = sumMaxKeep = sumTotalCoop = 0;
		int maxMaxKeep = 0;
		int maxTotalCoop = 0;
		int maxMaxExp = 0;
		int maxTotalExp = 0;
		int minFirstGen = 1000000;
		int minFirstExp = 0;
		boolean firstFlag;
		for (int j = 0; j < CConst.EXP; j++) {
			keep = maxKeep = totalCoop = firstGen = 0;
			firstFlag = false;
			for (int i = 0; i < CConst.GEN; i++) {
				char state = popStateTable[i][j];
				if (state == 'C') {
					keep++;
					if (maxKeep < keep) {
						maxKeep = keep;
					}
					totalCoop++;
					if (!firstFlag) {
						firstGen = i;
						firstFlag = true;
					}
				} else {
					if (keep != 0) {
						if (maxKeep < keep) {
							maxKeep = keep;
						}
						keep = 0;
					} // end if(keep !=0
				} // end if(state == C... else
			} // end for(int i=0
			sumMaxKeep += maxKeep;
			sumTotalCoop += totalCoop;
			sumFirstGen += firstGen;
			if (maxMaxKeep < maxKeep) {
				maxMaxKeep = maxKeep;
				maxMaxExp = j;
			}
			if (maxTotalCoop < totalCoop) {
				maxTotalCoop = totalCoop;
				maxTotalExp = j;
			}
			if (minFirstGen > firstGen) {
				minFirstGen = firstGen;
				minFirstExp = j;
			}
			pwStat.println(j + "\t" + firstGen + "\t" + totalCoop + "\t" + maxKeep);
		}
		// end for(int j=0
		double aveFirstGen = (double) sumFirstGen / (double) CConst.EXP;
		double aveMaxKepp = (double) sumMaxKeep / (double) CConst.EXP;
		double aveTotalCoop = (double) sumTotalCoop / (double) CConst.EXP;
		pwStat.println("ave first gen =" + CConst.round(aveFirstGen) + "\nave max keep = " + CConst.round(aveMaxKepp)
				+ "\nave total coop =  " + CConst.round(aveTotalCoop));
		pwStat.println("min first gen of this exp  " + minFirstExp + "-th =" + minFirstGen + "\nmax keep of this exp  "
				+ maxMaxExp + "-th = " + maxMaxKeep + "\nmax total coop  of this exp  " + maxTotalExp + "-th = "
				+ maxTotalCoop);

		// ファイルを閉じて終了
		closeFiles();
		System.out.println("end of main()");
	} // end of main()

	// 支援メソッド
	//

	static void initialize(double[] in) {
		for (int i = 0; i < in.length; i++) {
			in[i] = 0.0;
		}
	}

	//
	static void initialize(int[] in) {
		for (int i = 0; i < in.length; i++) {
			in[i] = 0;
		}
	}

	//
	static void initialize(double[][] in) {
		for (int i = 0; i < in.length; i++) {
			for (int j = 0; j < in[i].length; j++) {
				in[i][j] = 0.0;
			}
		}
	}

	//
	static void initialize(int[][] in) {
		for (int i = 0; i < in.length; i++) {
			for (int j = 0; j < in[i].length; j++) {
				in[i][j] = 0;
			}
		}
	}

	//
	static void initialize(char[] in) {
		for (int i = 0; i < in.length; i++) {
			in[i] = 'N';
		}
	}

	// 日付からファイル名をつくるので。
	static void makeDate() {
		// 記録用ファイルのための日付取得

		Calendar cal1 = Calendar.getInstance();
		int year = cal1.get(Calendar.YEAR); // 現在の年を取得
		int month = cal1.get(Calendar.MONTH); // 現在の月数-1を取得
		int day = cal1.get(Calendar.DATE);
		int hour = cal1.get(Calendar.HOUR_OF_DAY); // 現在の時を取得
		int minute = cal1.get(Calendar.MINUTE); // 現在の分を取得
		int second = cal1.get(Calendar.SECOND); // 現在の秒を取得
		String[] monthArray = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jly", "Aug", "Sep", "Oct", "Nov", "Dec" }; // 月表示を見やすくするため
		dateName = new String(monthArray[month] + day + "_" + year);
		timeStamp = new String(dateName + ":" + hour + ":" + minute + ":" + second);
	}

	static void makeFiles() {
		// 記録ファイルの準備
		gTypeFile = new File(dateName + "_GType.txt");
		statFile = new File(dateName + "_stat.txt");
		aveFile = new File(dateName + "_ave.txt");
		// 領域ごとのチェックファイルを作る
		matingAreaPayoff = new File(dateName + "_areaPayoff.txt");
		matingAreaNumber = new File(dateName + "_areaCount.txt");
		try {
			FileWriter fw = new FileWriter(gTypeFile);
			FileWriter fw2 = new FileWriter(statFile);
			FileWriter fw3 = new FileWriter(aveFile);
			BufferedWriter bw = new BufferedWriter(fw);
			BufferedWriter bw2 = new BufferedWriter(fw2);
			BufferedWriter bw3 = new BufferedWriter(fw3);
			pwGType = new PrintWriter(bw);
			pwStat = new PrintWriter(bw2);
			pwAve = new PrintWriter(bw3);

			FileWriter fw4 = new FileWriter(matingAreaPayoff);
			BufferedWriter bw4 = new BufferedWriter(fw4);
			pwAreaPayoff = new PrintWriter(bw4);
			FileWriter fw5 = new FileWriter(matingAreaNumber);
			BufferedWriter bw5 = new BufferedWriter(fw5);
			pwAreaNumber = new PrintWriter(bw5);

		} catch (IOException e) {
			e.printStackTrace();
		}
	} // end of makeFiles()

	static void closeFiles() {
		pwGType.close();
		pwStat.close();
		pwAve.close();
		pwAreaPayoff.close();
		pwAreaNumber.close();
	}

	private static int[] matToRecord(int[][] in) {
		// 2次元配列を1次元配列にしまい込む。
		int[] out = new int[in.length * in[0].length];
		for (int i = 0; i < in.length; i++) {
			for (int j = 0; j < in[i].length; j++) {
				out[i * in[i].length + j] = in[i][j];
			}
		}
		// System.out.println("");
		return out;
	}

	// 上記のdouble 版
	private static double[] matToRecord(double[][] in) {
		double[] out = new double[in.length * in[0].length];
		for (int i = 0; i < in.length; i++) {
			for (int j = 0; j < in[i].length; j++) {
				out[i * in[i].length + j] = in[i][j];
			}
		}
		// System.out.println("");
		return out;
	}

	private static boolean bingo(double prob) {
		boolean r = false;
		// 乱数を出して、確率以下ならビンゴ
		if (Math.random() < prob)
			r = true;
		return r;
	}

	private static void makeParent(int[] parentsList) {
		// parentsList の初期化
		initialize(parentsList);
		// ルーレットを作る
		double sum = 0.0;
		for (int i = 0; i < pop.length; i++) {
			sum += pop[i].getScalledPayoff();
		}
		// ルーレットの幅
		double[] roulet = new double[pop.length];
		roulet[0] = pop[0].getScalledPayoff() / sum;
		for (int m = 1; m < pop.length; m++) {
			roulet[m] = roulet[m - 1] + (pop[m].getScalledPayoff() / sum);
		}
		// for(int m=0;m<roulet.length;m++){
		// System.out.print("\t"+CConst.round(roulet[m]));
		// }
		// System.out.println("");
		// ルーレットを回して交配領域にある個体と同じ 数だけ親を選択
		double border;
		int p_index;
		for (int i = 0; i < pop.length; i++) {
			p_index = 0; // 初期化の位置に注意
			border = Math.random();
			// System.out.print("確率:\t"+CConst.round(border));
			while (roulet[p_index] < border)
				p_index++;
			parentsList[i] = p_index;
		}
	}

	private static void linearScalling() {
		// 全集団が対象
		// 線形スケーリング。まず、最大値、最小値、平均値を求める。
		double max, min, ave;
		double sum = 0.0;
		max = pop[0].getCumPayoff();
		min = pop[0].getCumPayoff();
		sum = pop[0].getCumPayoff();
		for (int i = 1; i < pop.length; i++) {
			sum += pop[i].getCumPayoff();
			if (max < pop[i].getCumPayoff()) {
				max = pop[i].getCumPayoff();
			}
			if (min > pop[i].getCumPayoff()) {
				min = pop[i].getCumPayoff();
			}
		}
		ave = sum / (double) pop.length;
		// check
		/*
		 * System.out.print("size:" + mR.size()); for (int i = 0; i < mR.size();
		 * i++) { System.out.print("\t" + pop[mR.get(i)].getCumPayoff()); }
		 * System.out.println("\nmax=" + max + "\tmin=" + min + "\tave=" + ave);
		 */
		// 線形スケーリングの係数計算
		double fmultiple = 2.0;
		double delta, a, b;
		if (min > (fmultiple * ave - max) / (fmultiple - 1.0)) {
			delta = max - ave;
			a = (fmultiple - 1.0) * ave / delta;
			b = fmultiple * ave - a * max;
		} else {
			delta = ave - min;
			a = ave / delta;
			b = -min * ave / delta;
		}
		// 以上で線形スケーリングの係数が決定した。
		// 以下でスケーリングを行い、数値を個体に格納する。
		delta = 0.0;// 使い回す
		for (int m = 0; m < pop.length; m++) {
			double payoff = pop[m].cumPayoff;
			pop[m].setScalledPayoff(a * payoff + b);
		}
	}// end of linearScalling()
		//

	static void game(int p1, int p2) {
		// 個体番号 p1,p2 でゲームを行う。
		// それぞれのプレイヤーの「手」
		// System.out.print("(" + p1 + "," + p2 + ")\t");
		// System.out.println("("+pop[p1].mySelect()+","+pop[p2].mySelect()+")");
		char select_p1 = pop[p1].mySelect();
		char select_p2 = pop[p2].mySelect();
		if (select_p1 == 'C' && select_p2 == 'C') {
			pop[p1].setPayoff(3.0);
			pop[p2].setPayoff(3.0);
		}
		if (select_p1 == 'C' && select_p2 == 'D') {
			pop[p1].setPayoff(0.0);
			pop[p2].setPayoff(5.0);
		}
		if (select_p1 == 'D' && select_p2 == 'C') {
			pop[p1].setPayoff(5.0);
			pop[p2].setPayoff(0.0);
		}
		if (select_p1 == 'D' && select_p2 == 'D') {
			pop[p1].setPayoff(1.0);
			pop[p2].setPayoff(1.0);
		}
		pop[p1].reMem(select_p2);
		pop[p2].reMem(select_p1);
		//
		// ゲームカウントを増やす
		pop[p1].gameCount++;
		pop[p2].gameCount++;

		// System.out.println("(p1="+p1+",p2="+p2+")=("+select_p1+","+select_p2+"):");
		// System.out.println("pre_mem:p1="+pop[p1].preMem+",p2="+pop[p2].preMem);
		// double payoff_p1= pop[p1].getCumPayoff();
		// double payoff_p2 = pop[p2].getCumPayoff();
		// System.out.println("("+payoff_p1+","+payoff_p2+")");
	}// end of game()

	// Regioncounter
	static int regionCounter(double minX, double maxX, double minY, double maxY) {
		int r = 0;
		for (int m = 0; m < CConst.numOfMember; m++) {
			if (pop[m].isThere(minX, maxX, minY, maxY)) {
				r++;
			}
		}
		return r;
	}

	// 領域内の利得合計
	static double regionPayoffSum(double minX, double maxX, double minY, double maxY) {
		double sum = 0.0;
		for (int m = 0; m < CConst.numOfMember; m++) {
			if (pop[m].isThere(minX, maxX, minY, maxY)) {
				sum += pop[m].cumPayoff;
			}
		}
		return sum;
	}

}
